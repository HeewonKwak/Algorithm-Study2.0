'''
input: n(tops의 길이), tops(i+1번째 정삼각형의 위쪽에 정삼각형을 붙이는 경우 1, 붙이지 않는 경우 0)
output: 모양을 정삼각형 또는 마름모 타일로 빈 곳이 없도록 채우는 경우의 수(10007로 나눈 나머지)

## 함수 설명
- `check_start`: 1번째 타일 경우의 수
- `check_top`: 각각의 i 번째 top의 조건에 따른 경우의 수

## 접근 방식
- 경우의 수를 숫자 2개로 계산
    - why? 마지막 타일이 삼각형 또는 마름모인 경우에 따라 구하는 방식이 다름
    - how? 경우의 수를 [마지막 타일이 삼각형인 경우, 마지막 타일이 마름모인 경우]
- top이 1인 경우
    - 뒤에 추가로 붙일 수 있는 타일의 총 경우의 수는 4이다.
        - 모두 삼각형, 위에 마름모, 왼쪽 마름모, 오른쪽 마른모
    - 4가지 경우의 수에서 기존의 경우의 수들 중에 마름모로 끝나는 경우는 왼쪽이 마름모인 경우를 추가 할 수 없다.
    - input: i번째까지 경우: [마지막 타일이 삼각형인 경우, 마지막 타일이 마름모인 경우] = [x, y]
    - 총 경우의 수: 4 * x + 3 * y , 마지막 타일이 마름모인 경우: x + y
    - output: i + 1번째까지 경우: [3*x + 2*y, x + y] => [마지막 타일이 삼각형인 경우, 마지막 타일이 마름모인 경우]
- top이 0인 경우
    - 뒤에 추가로 붙일 수 있는 타일의 총 경우의 수는 4이다.
        - 모두 삼각형, 왼쪽 마름모, 오른쪽 마른모
    - 3가지 경우의 수에서 기존의 경우의 수들 중에 마름모로 끝나는 경우는 왼쪽이 마름모인 경우를 추가 할 수 없다.
    - input: i번째까지 경우: [마지막 타일이 삼각형인 경우, 마지막 타일이 마름모인 경우] = [x, y]
    - 총 경우의 수: 3 * x + 2 * y , 마지막 타일이 마름모인 경우: x + y
    - output: i + 1번째까지 경우: [2*x + y, x + y] => [마지막 타일이 삼각형인 경우, 마지막 타일이 마름모인 경우]
- 시간 복잡도를 줄이기 위하여 10007로 나누는 작업도 계속 해준다.

## 사용한 모듈
`없음`

## 추가 정보
- 시간: 1 hour 미만
- 힌트: `None`

채점을 시작합니다.
정확성  테스트
테스트 1 〉	통과 (0.01ms, 10.2MB)
테스트 2 〉	통과 (0.01ms, 10.1MB)
테스트 3 〉	통과 (0.01ms, 10.3MB)
테스트 4 〉	통과 (0.01ms, 10.3MB)
테스트 5 〉	통과 (0.01ms, 10.2MB)
테스트 6 〉	통과 (0.01ms, 10.4MB)
테스트 7 〉	통과 (0.01ms, 10.2MB)
테스트 8 〉	통과 (0.01ms, 10.1MB)
테스트 9 〉	통과 (0.01ms, 10.2MB)
테스트 10 〉	통과 (0.01ms, 10.2MB)
테스트 11 〉	통과 (0.39ms, 10.2MB)
테스트 12 〉	통과 (0.47ms, 10.2MB)
테스트 13 〉	통과 (0.35ms, 10.2MB)
테스트 14 〉	통과 (0.66ms, 10.1MB)
테스트 15 〉	통과 (0.26ms, 10.2MB)
테스트 16 〉	통과 (0.30ms, 10.3MB)
테스트 17 〉	통과 (43.44ms, 10.6MB)
테스트 18 〉	통과 (40.61ms, 10.8MB)
테스트 19 〉	통과 (60.49ms, 10.7MB)
테스트 20 〉	통과 (55.69ms, 10.9MB)
테스트 21 〉	통과 (47.97ms, 10.5MB)
테스트 22 〉	통과 (43.66ms, 10.9MB)
테스트 23 〉	통과 (33.53ms, 10.8MB)
테스트 24 〉	통과 (34.98ms, 10.6MB)
테스트 25 〉	통과 (33.53ms, 10.4MB)
채점 결과
정확성: 100.0
합계: 100.0 / 100.0

### ISSUE NUMBER
<!-- 이슈 번호를 입력해주세요 -->
- #29 
'''

def solution(n, tops):
    answer = 0

    def check_start(top:int)->list:
        '''
        function: 1번째 타일 경우의 수
        input: 위쪽에 정삼각형 유무
        output: 다음의 경우의 수
        '''
        if top == 1: return [3,1]
        else: return [2,1]

    def check_top(top:int, cases:list)->list:
        '''
        function: 각각의 i 번째 top의 조건에 따른 경우의 수
        input: 위쪽에 정삼각형 유무
        output: 다음의 경우의 수
        '''
        if top == 1:
            return [(cases[0] * 3 + cases[1] * 2) % 10007, (cases[0] + cases[1] ) % 10007 ]
        else: 
            return [(cases[0] * 2 + cases[1]) % 10007, (cases[0] + cases[1] ) % 10007 ]
    
    answer = check_start(tops[0])

    for i in range(1, n):
        answer = check_top(tops[i], answer)

    return sum(answer) % 10007