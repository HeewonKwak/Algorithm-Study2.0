'''
## 접근 방식
- 점화식 찾기
    - 가로가 x만큼 늘어날 때 추가되는 경우의 수
        - x = 1, case 1개
        - x = 2, case 2개
        - x = 3, case 5개
        - 까지만 고려해서 점화식: dp[i] = dp[i-1] + 2dp[i-2] + 5dp[i-3] -> 오답
    - 힌트 참조
        - x = 4, case 2개
        - x = 5, case 2개
        - x = 6, case 4개
        - ... 반복
        - 까지만 고려해서 점화식: dp[i] = dp[i-1] + 2dp[i-2] + 5dp[i-3] + 2dp[i-4] + 2dp[i-5] + 4dp[i-6] + ... -> 시간 초과
    - 힌트 추가
        - 반복되는 주기가 3차이가 나므로 dp[i] - dp[i-3] 으로 점화식을 구한다
        - 최종 점화식
            - dp[i] = dp[i-1] + 2dp[i-2] + 6dp[i-3] + dp[i-4] - dp[i-6] (i >= 6)
            - dp[i] = dp[i-1] + 2dp[i-2] + 5dp[i-3] + 2dp[i-4] + 2dp[i-5] (i = 5)
            - dp[i] = dp[i-1] + 2dp[i-2] + 5dp[i-3] + 2dp[i-4] (i = 4)
            - dp[i] = dp[i-1] + 2dp[i-2] + 5dp[i-3] (i = 3)
            - dp[i] = dp[i-1] + 2dp[i-2] (i = 2)
            - dp[1] = 1

## 사용한 모듈
`None`

## 추가 정보
- 시간: 1 hour 고민 후에 힌트
- 힌트: 有

### ISSUE NUMBER
<!-- 이슈 번호를 입력해주세요 -->
- #61
'''

DIV = 1_000_000_007
def solution(n:int)->int:
    dp = [1]*(n+1)  # dp 초기화, dp[0]과 dp[1] 값이 1이면 for문 idx 6부터 가능
    dp[2:6] = [3, 10, 23, 62] # [3, 3 + 1 * 2 + 1 * 5, 10 + 3 * 2 + 1 * 5 + 1 * 2,\
                              #  23 + 10 * 2 + 3 * 5 + 1 * 2 + 1 * 2]
    for i in range(6, n + 1):
        dp[i] = (dp[i-1] + 2 * dp[i-2] + 6 * dp[i-3] + dp[i-4] - dp[i-6]) % DIV
    return dp[n]